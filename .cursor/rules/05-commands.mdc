---
alwaysApply: true
---

# Commandes et Permissions pour l'IA

## Commandes toujours autoris√©es

### ‚úÖ **Commandes de d√©veloppement quotidiennes :**

- `npm run lint` - V√©rifier la qualit√© du code
- `npm run test` - Lancer les tests unitaires
- `npm run build` - Construire l'application pour la production
- `npm run dev` - D√©marrer le serveur de d√©veloppement
- `git status` - Voir l'√©tat du d√©p√¥t Git
- `git diff` - Voir les changements en attente
- `git log --oneline` - Voir l'historique des commits

### ‚úÖ **Commandes d'analyse et diagnostic :**

- `npm run type-check` - V√©rifier les types TypeScript
- `npm audit` - Analyser les vuln√©rabilit√©s des d√©pendances
- `npm ls --depth=0` - Lister les d√©pendances install√©es
- `du -sh node_modules` - Voir la taille du dossier node_modules

## Commandes conditionnelles

### ‚ö†Ô∏è **Commandes n√©cessitant v√©rification :**

- `git add .` - Seulement apr√®s v√©rification des changements
- `git commit -m "message"` - Seulement avec message conventionnel en anglais
- `git push` - Seulement sur une branche feature (pas main/master)
- `npm install <package>` - Seulement pour les d√©pendances n√©cessaires et justifi√©es
- `npm uninstall <package>` - Seulement pour les d√©pendances inutilis√©es

### ‚ö†Ô∏è **Commandes de gestion Git :**

- `git checkout -b <branch-name>` - Suivre la convention de nommage des branches
- `git merge <branch>` - Apr√®s v√©rification des conflits potentiels
- `git rebase <branch>` - Avec pr√©caution et communication
- `git reset --soft HEAD~1` - Seulement pour corriger le dernier commit

## Commandes interdites

### ‚ùå **Commandes dangereuses :**

- `git push --force` ou `git push -f` - Jamais utiliser force push
- `git reset --hard` - Risque de perte de donn√©es
- `git push --force-with-lease` - Pr√©f√©rer une approche collaborative
- `rm -rf node_modules` - Utiliser `npm ci` ou `npm install` √† la place

### ‚ùå **Commandes de suppression :**

- `rm -rf .git` - Ne jamais supprimer l'historique Git
- Suppression de fichiers importants sans confirmation
- Modification des fichiers de configuration critiques sans validation

### ‚ùå **Commandes de d√©ploiement :**

- `npm run deploy` - N√©cessite validation manuelle
- `git push origin main` - Toujours passer par une PR
- Commandes de d√©ploiement en production

## Workflow de commandes recommand√©

### üöÄ **D√©veloppement quotidien :**

```bash
# 1. V√©rifier l'√©tat du projet
git status

# 2. Lancer les tests et lint
npm run lint
npm run test

# 3. D√©marrer le d√©veloppement
npm run dev
```

### ‚úÖ **Avant de commiter :**

```bash
# 1. V√©rifier la qualit√© du code
npm run lint
npm run test
npm run build

# 2. Ajouter les fichiers (avec v√©rification)
git add .

# 3. Commiter avec message conventionnel
git commit -m "feat: add shopping list functionality"
```

### üîÑ **Cr√©ation d'une fonctionnalit√© :**

```bash
# 1. Cr√©er une branche feature
git checkout -b feats/add-shopping-list

# 2. D√©velopper la fonctionnalit√©
# ... travail sur la fonctionnalit√© ...

# 3. Tester et valider
npm run lint
npm run test
npm run build

# 4. Commiter
git add .
git commit -m "feat: implement shopping list component"

# 5. Pousser
git push origin feats/add-shopping-list
```

### üì¶ **Gestion des d√©pendances :**

```bash
# ‚úÖ Recommand√©
npm install react-router-dom  # Nouvelle d√©pendance n√©cessaire
npm uninstall lodash         # D√©pendance inutilis√©e

# ‚ùå √Ä √©viter
npm install webpack          # D√©pendance non n√©cessaire pour Vite
npm install left-pad         # Package deprecated
```

## R√®gles de s√©curit√©

### üîí **V√©rifications obligatoires :**

- Toujours v√©rifier les changements avant `git add .`
- Tester l'application apr√®s `npm install`
- Valider les types TypeScript avant commit
- S'assurer que les tests passent avant push

### üö® **Signes d'alerte :**

- Erreurs de build non r√©solues
- Tests qui √©chouent
- Warnings de s√©curit√© npm
- Conflits Git non r√©solus

## Instructions pour l'IA assistant

- **V√©rifier** : Toujours les commandes avant de les ex√©cuter
- **Respecter** : Les permissions d√©finies ci-dessus
- **Pr√©f√©rer** : Les workflows recommand√©s
- **Alerter** : En cas de commandes potentiellement dangereuses
- **Guider** : L'utilisateur vers les bonnes pratiques
