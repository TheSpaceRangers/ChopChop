---
alwaysApply: true
---

# Règles pour l'Application de Gestion de Liste de Courses "ChopChop"

## Vue d'ensemble du projet

Cette application permet aux utilisateurs de créer, gérer et partager des listes de courses. Elle doit être intuitive, rapide et fonctionnelle.

## Technologies et architecture

- **Frontend** : React avec TypeScript
- **Build tool** : Vite
- **Styling** : Tailwind CSS & shadnc/ui
- **Stockage** : Supabase (PostgreSQL)
- **API** : Supabase Functions

## Structure des dossiers

```
src/
├── components/          # Composants UI réutilisables
│   ├── ui/             # Composants de base (Button, Input, etc.)
│   ├── layout/         # Layout et navigation
│   └── features/       # Composants spécifiques aux fonctionnalités
├── hooks/              # Hooks personnalisés
├── types/              # Types TypeScript
├── utils/              # Fonctions utilitaires
├── contexts/           # Contextes React (thème, listes, etc.)
└── data/               # Données mockées et constantes
```

## Fonctionnalités principales à implémenter

1. **Création de listes** : Interface pour ajouter/modifier des articles
2. **Gestion des articles** : Ajouter, supprimer, cocher/décocher, quantités
3. **Catégorisation** : Regrouper par catégories (fruits, légumes, produits laitiers, etc.)
4. **Partage** : Exporter/importer des listes (JSON, partage par lien)
5. **Persistance** : Sauvegarde automatique des données
6. **Interface responsive** : Fonctionnel sur mobile et desktop

## Bonnes pratiques de développement

- **Composants** : Créer des composants petits et réutilisables
- **Hooks** : Extraire la logique métier dans des hooks personnalisés
- **Types** : Tout doit être typé TypeScript
- **Performance** : Utiliser React.memo, useMemo, useCallback quand nécessaire
- **Accessibilité** : Respecter les standards WCAG (labels, navigation clavier)
- **Tests** : Écrire des tests pour les fonctionnalités critiques

## Conventions de nommage

- **Composants** : PascalCase (ex: ShoppingList, ItemCard)
- **Hooks** : camelCase avec préfixe "use" (ex: useShoppingList)
- **Types** : PascalCase avec suffixe "Type" ou "Props" (ex: ItemType, ButtonProps)
- **Fichiers** : PascalCase pour composants, camelCase pour autres

## Workflow de développement

1. **Planification** : Créer des todos pour les tâches complexes
2. **Implémentation** : Commencer par les fonctionnalités core
3. **Styling** : Interface moderne et intuitive
4. **Optimisation** : Performance et accessibilité
5. **Tests** : Validation des fonctionnalités

## Instructions pour l'IA assistant

- **Proposer** : Des solutions React/TypeScript modernes
- **Guider** : Vers une architecture modulaire et maintenable
- **Optimiser** : Pour les performances et l'expérience utilisateur
- **Respecter** : Les conventions définies ci-dessus
- **Suggérer** : Des améliorations UX/UI quand pertinent
- **Créer** : Des composants réutilisables systématiquement
