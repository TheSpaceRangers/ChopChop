---
alwaysApply: true
---

# Standards de Test

## Structure et organisation des tests

### ‚úÖ **Structure d'un test unitaire :**

```typescript
describe("ShoppingList Component", (): void => {
  it("should add item to list", (): void => {
    // Arrange
    const mockItem: Item = {
      id: "1",
      name: "Test Item",
      quantity: 1,
      completed: false,
    };
    const { result } = renderHook(() => useShoppingList());

    // Act
    act((): void => {
      result.current.addItem(mockItem);
    });

    // Assert
    expect(result.current.lists[0].items).toContain(mockItem);
  });
});
```

### ‚úÖ **Structure d'un test d'int√©gration :**

```typescript
describe("ShoppingList Integration", (): void => {
  it("should persist list to localStorage", async (): Promise<void> => {
    // Arrange
    const { result } = renderHook(() => useShoppingList());
    const testItem: Item = {
      id: "test-1",
      name: "Test Item",
      quantity: 1,
      completed: false,
    };

    // Act
    act((): void => {
      result.current.addItem(testItem);
    });

    // Assert
    expect(localStorage.getItem).toHaveBeenCalledWith("shopping-lists");
    expect(result.current.lists).toHaveLength(1);
  });
});
```

### ‚úÖ **Test des composants React :**

```typescript
describe('ItemCard Component', (): void => {
  const mockItem: Item = {
    id: '1',
    name: 'Test Item',
    quantity: 1,
    completed: false
  };

  it('should render item name', (): void => {
    render(<ItemCard item={mockItem} onClick={jest.fn()} />);

    expect(screen.getByText('Test Item')).toBeInTheDocument();
  });

  it('should call onClick when clicked', (): void => {
    const mockOnClick = jest.fn();
    render(<ItemCard item={mockItem} onClick={mockOnClick} />);

    fireEvent.click(screen.getByRole('button'));

    expect(mockOnClick).toHaveBeenCalledWith(mockItem);
  });
});
```

## Bonnes pratiques de test

### üìù **Nommage des tests :**

```typescript
// ‚úÖ Bien
describe("useShoppingList Hook", () => {
  describe("addItem", () => {
    it("should add item to empty list", () => {
      /* ... */
    });
    it("should add item to existing list", () => {
      /* ... */
    });
    it("should handle duplicate items", () => {
      /* ... */
    });
  });

  describe("removeItem", () => {
    it("should remove existing item", () => {
      /* ... */
    });
    it("should handle removing non-existent item", () => {
      /* ... */
    });
  });
});

// ‚ùå √Ä √©viter
describe("Test", () => {
  it("test 1", () => {
    /* ... */
  });
  it("should work", () => {
    /* ... */
  });
});
```

### üéØ **Types de tests √† √©crire :**

#### **Tests unitaires (composants isol√©s) :**

- Logique m√©tier pure
- Hooks personnalis√©s
- Fonctions utilitaires
- Validations

#### **Tests d'int√©gration :**

- Interaction entre composants
- Flux de donn√©es complets
- API calls
- Persistance des donn√©es

#### **Tests E2E (end-to-end) :**

- Parcours utilisateur complets
- Fonctionnalit√©s critiques
- Performance et accessibilit√©

### üõ†Ô∏è **Outils et configuration :**

#### **Jest + React Testing Library :**

```typescript
// jest.config.js
module.exports = {
  testEnvironment: "jsdom",
  setupFilesAfterEnv: ["<rootDir>/src/setupTests.ts"],
  moduleNameMapping: {
    "^@/(.*)$": "<rootDir>/src/$1",
  },
  collectCoverageFrom: [
    "src/**/*.{ts,tsx}",
    "!src/**/*.d.ts",
    "!src/main.tsx",
    "!src/vite-env.d.ts",
  ],
};
```

#### **Setup des tests :**

```typescript
// src/setupTests.ts
import "@testing-library/jest-dom";

// Mock localStorage
const localStorageMock = {
  getItem: jest.fn(),
  setItem: jest.fn(),
  removeItem: jest.fn(),
  clear: jest.fn(),
};
global.localStorage = localStorageMock;

// Mock matchMedia
Object.defineProperty(window, "matchMedia", {
  writable: true,
  value: jest.fn().mockImplementation((query) => ({
    matches: false,
    media: query,
    onchange: null,
    addListener: jest.fn(),
    removeListener: jest.fn(),
    addEventListener: jest.fn(),
    removeEventListener: jest.fn(),
    dispatchEvent: jest.fn(),
  })),
});
```

### üìä **Coverage et qualit√© :**

#### **Objectifs de couverture :**

- **Statements** : > 80%
- **Branches** : > 75%
- **Functions** : > 85%
- **Lines** : > 80%

#### **√âcrire des tests maintenables :**

- Tests lisibles et compr√©hensibles
- Pas de logique complexe dans les tests
- Utilisation de helpers et factories
- Tests ind√©pendants les uns des autres

## Instructions pour l'IA assistant

- **Cr√©er** : Des tests pour toute nouvelle fonctionnalit√©
- **Tester** : Les fonctionnalit√©s critiques en priorit√©
- **Suivre** : La structure recommand√©e pour les tests
- **Utiliser** : Les bonnes pratiques de nommage
- **Maintenir** : Une couverture de test suffisante
